# Generated by Django 5.2 on 2025-05-09 04:36

from django.db import migrations, models

def load_skills(apps, schema_editor):
    Skill = apps.get_model('portfolio', 'skill')
    skills = [
        "PHP", "SCRUM", "Project Managment Fundamentals", "Cloud Computing", "Linux",
        "SQLite", "MongoDB", "MySQL", "GitHub", "Git", "Tailwind CSS", "Python",
        "Java", "Flask", "C/C++", "Bootstrap", "CSS", "HTML", "JavaScript", "Next.js",
        "Django", "React"
    ]
    for skill in skills:
        Skill.objects.create(name=skill)

def load_projects(apps, schema_editor):
    Skill = apps.get_model('portfolio', 'skill')
    Project = apps.get_model('portfolio', 'project')

    projects_data = [
        {
            "name": "Talkify",
            "description": "This is a blogging social network project where users can view posts without logging in. However, by authenticating with Google, they can create, like, and comment on posts. The app is hosted on render.com, so it may take a while to launch the first time as it reactivates the systems.",
            "year": 2025,
            "img": "static/img/img1.png",
            "web_link": "https://github.com/ChrisUBS/talkify",
            "skills": ["Next.js", "Tailwind CSS", "Flask", "Python", "MongoDB"]
        },
        {
            "name": "Issues Managaer",
            "description": "Issues Manager is an open-source web application for managing issues, tasks, and bugs using a Kanban system. It's developed in Django and SQLite and is ideal for development teams looking to easily organize and track their projects.",
            "year": 2025,
            "img": "static/img/img2.png",
            "web_link": "https://github.com/ChrisUBS/FSDI-113-issues-manager",
            "skills": ["Django", "Python", "SQLite"]
        },
        {
            "name": "CIMED (Medical Simulator)",
            "description": "Clinical case simulator for FACISALUD students.",
            "year": 2024,
            "img": "static/img/img3.png",
            "web_link": "https://citecuvp.tij.uabc.mx/cimed/",
            "skills": ["HTML", "CSS", "JavaScript", "PHP", "MySQL"]
        },
    ]

    for data in projects_data:
        skills = data.pop("skills")
        project = Project.objects.create(**data)
        for skill_name in skills:
            try:
                skill = Skill.objects.get(name=skill_name)
                project.skills.add(skill)
            except Skill.DoesNotExist:
                pass

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('year', models.PositiveIntegerField()),
                ('img', models.ImageField(upload_to='./static/img/')),
                ('web_link', models.URLField()),
                ('skills', models.ManyToManyField(related_name='projects', to='portfolio.skill')),
            ],
        ),
        migrations.RunPython(load_skills),
        migrations.RunPython(load_projects),
    ]